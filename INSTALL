Requirements
------------

The library itself does not require external resources. Optional configure
flags require external resources:

 --enable-app-fuzzer           requires libpcap.
 --enable-app-performance      requires libpcap.
 --enable-app-sniffer          requires libpcap.
 --enable-app-tunnel           requires TUN support.
 --enable-app-stats            requires libpcap, gnuplot, grep, sed, awk, sort,
                               and tr.
 --enable-linux-kernel-module  requires a Linux kernel
 --enable-doc                  requires doxygen and latex.
 --enable-doc-man              requires --enable-doc to be selected, doxy2man
                               and help2man.
 --enable-rohc-tests           requires libpcap, cmocka, and sed.
 --enable-rohc-tests-valgrind  requires --enable-rohc-tests to be selected,
                               valgrind, xsltproc, and grep.


Libraries and tools
-------------------

Configure the libraries and tools:

 $ ./configure --prefix=/path/to/installation/directory

 Note:
  - Use ./autogen.sh instead of ./configure if you are building from the source
    repository.
  - Add option --enable-examples if you want ot build the examples located in
    the examples/ directory.

Build the libraries and tools:

 $ make all

Install the libraries and tools:

 $ make install

The libraries are now located in the /path/to/installation/directory/lib
directory, the header files in the /path/to/installation/directory/include
directory and the tools in the /path/to/installation/directory/bin directory.

In case of problem:
 - check you got the last release of the library (see README),
 - contact the mailing list (see README),
 - check the bugtracker for known bugs (see README).


Documentation
-------------

HTML documentation can be generated from the source code thanks to Doxygen:

 $ ./configure --enable-doc
 $ make -C doc/

Open the ./doc/html/index.html file in your favorite web browser.


Tests
-----

The functional, robustness and non-regression tests may be run:

 $ ./configure --enable-rohc-tests
 $ make check

Add option --enable-rohc-tests-valgrind if you want to run tests within
valgrind.


Python binding
--------------

As of version 2.0.0, a Python binding was added. It is located in the
contrib/python/ sub-directory.

Notes:
* The Python binding is not as CPU performant as the C library, so it is only
  recommended for testing or rapid prototyping.
* The Python binding currently only supports Python 2.x. The Python module
  does not work correctly with Python 3.x for the moment.

Build the Python binding:

 $ cd contrib/python/
 $ python setup.py build

Install the Python binding:

 $ python setup.py install

An example is provided in contrib/python/example.py. You may execute it to test
the Python binding (once it was installed on your system):

 $ ./contrib/python/example.py 10
 create a stream of RTP packets
 10 60-byte RTP packets created with 20-byte payload
 create ROHC compressor
 create ROHC decompressor
 ..........
 all 10 packets were successfully compressed
 232 bytes (39%) saved by compression

You may also run the non-regression tests for the Python binding:

 $ USE_PYTHON=yes make -C test/non_regression/ check


Developers
-----------

Developers may be interested in additional configure options:
  --enable-fail-on-warning  causes the build to fail if a warning is emitted
                            by the compiler (-Werror)
  --enable-rohc-debug       enable library extra debug traces with performances
                            impact
  --enable-fortify-sources  enables some overflow protections (-D_FORTIFY_SOURCE=2)
  --enable-code-coverage    compute code coverage

